#+TITLE: Dev Docs
* Notes
** Postgres
- Postgres is run on Docker
- "scripts/init_db.sh" contains the settings for Postgres and commands to launch the Docker image
** Caching dev dependencies
"cargo-chef" causes memory overload when building on Digital ocean
"cargo-build-deps" worked
** Deploying
*** application on Docker
- in the main source file the db connection pool tries to connect immediately to the db
- the db is not accessible by the app container and therefore panics
*** Deploying application on Digital Ocean
- the spec files from the book do not include the database on initial deployment. without connection to the database (as specified in main.rs), it will panic and fail to deploy
** Database Transactions
- group related operations in a single unit of work
- start with "BEGIN" and end with "COMMIT"
- if any queries fail, the database rolls back
- sqlx has dedicated API for transactions
** Errors
- enable caller to react (control flow)
- need enough context about the failure to produce a report for an operator to troubleshoot
- can be internal (ex. function calling another function within app) or at the edge (ex. API request that we failed to fulfill)
** Trait Objects
- A trait object points to both an instance of a type implementing our specified trait as well as a table used to look up trait methods on that type at runtime
- We create a trait object by specifying some sort of pointer, such as a & reference or a Box<T> smart pointer, then the dyn keyword, and then specifying the relevant trait.
- can be used to invoke different implementations of the same interface
- incur runtime cost (dynamic dispatch)
** Option Type
- optional value
- is either Some (and contains a value) or None (does not contain a value)
* Diary
** 05-09-2021
- learned about importance of errors (control flow and providing info to user or operator)
- internal or on the edge
- implemented a test for database errors and examined the logs (using pretty printing)
** 06-09-2021
- lines without semi-colons are expression who's value we want to return
- example:
  "fn plus_one(x: i32) -> i32 {
    x + 1
    }"
    is correct because we want to return the value of "x + 1"
  "fn plus_one(x: i32) -> i32 {
    x + 1;
    }" would produce an error
}
- orphan rule: cannot implement a foreign trait for a foreign type (foreign means another create). We must define a new type to wrap external type
** 07-09-2021
- learned about trait objects to access the underlying root cause of the current error without having to know info about the type of the error (invoke different implementations of the same interface) -> used standard library trait "Error" which provides different representations (Debug and Display) and source (underlying cause of error)
- can use match statements within enums for control flow -> behave differently based on the specific failure scenario
** 09-09-2021
- implemented different enum variants depending on the type of database error, because the display message needs to be customized depending on whether it is a connection error, tracsaction error, etc.
- implemented a derive macro (thiserror) to replace manual implementation of Display, source (root cause of error) and from (converting underlying errors into our own custom error type -> in thiserror, is also includes source so we don't have to specify that twice)
* Feedback
- In 8.2.1, when implementing StoreToken in the subscribe request handler, we change the return type for "HttpResponse" to "Result<HttpResponse, actix_web::Error>". This requires that the "error" case returned from new_subscriber, transaction, subscriber_id is changed from to return the correct type
  "HttpResponse::InternalServerError().finish()"
  to
  "return Ok(HttpResponse::Internationalization().finish())"
* Docs
** Postgres
- make executable with
#+begin_src shell
cmod +x ./scripts/init_db.sh
#+end_src


- run ~init_db~ to launch Postgres
#+begin_src shell
./scripts/init_db.sh > /dev/null
#+end_src

- if you want to restart the database

#+begin_src shell
docker kill $(docker ps -q)
./scripts/init_db.sh > /dev/null
#+end_src

- can confirm image is running with command

#+begin_src shell
docker ps
#+end_src

- to make space on vm database

#+begin_src shell
docker kill ps
docker system prune
#+end_src

** App on Docker
- build image
  #+begin_src shell
  docker build --tag zero2prod --file Dockerfile .
  #+end_src

- launch app
  #+begin_src shell
  docker run -p 8000:8000 zero2prod
  #+end_src

** Routes
Testing routes
*** Health Check
#+begin_src shell :results code
curl --verbose http://127.0.0.1:8000/health_check 2>&1
#+END_SRC

** OS Error 24 - "Too many open files"
- increase the limit on maximum number of open file descriptors to 10000
  #+begin_src shell
  ulimit -n 10000
  #+end_src
** SQLX Logs with pretty printing
export RUST_LOG="sqlx=error,info"
export TEST_LOG=enabled
cargo t {TEST_NAME OR KEYWORD} | bunyan
