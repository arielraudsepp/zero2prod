#+TITLE: Dev Docs
* Notes
** Postgres
- Postgres is run on Docker
- "scripts/init_db.sh" contains the settings for Postgres and commands to launch the Docker image
** Caching dev dependencies
"cargo-chef" causes memory overload when building on Digital ocean
"cargo-build-deps" worked
** Deploying
*** application on Docker
- in the main source file the db connection pool tries to connect immediately to the db
- the db is not accessible by the app container and therefore panics
*** Deploying application on Digital Ocean
- the spec files from the book do not include the database on initial deployment. without connection to the database (as specified in main.rs), it will panic and fail to deploy
** Database Transactions
- group related operations in a single unit of work
- start with "BEGIN" and end with "COMMIT"
- if any queries fail, the database rolls back
- sqlx has dedicated API for transactions
** Errors
- enable caller to react (control flow)
- need enough context about the failure to produce a report for an operator to troubleshoot
- can be internal (ex. function calling another function within app) or at the edge (ex. API request that we failed to fulfill)
* Diary
** 05-09-2021
- learned about importance of errors (control flow and providing info to user or operator)
- internal or on the edge
- implemented a test for database errors and examined the logs (using pretty printing)
** 06-09-2021
- lines without semi-colons are expression who's value we want to return
- example:
  "fn plus_one(x: i32) -> i32 {
    x + 1
    }"
    is correct because we want to return the value of "x + 1"
  "fn plus_one(x: i32) -> i32 {
    x + 1;
    }" would produce an error
}
- orphan rule: cannot implement a foreign trait for a foreign type (foreign means another create). We must define a new type to wrap external type
* Docs
** Postgres
- make executable with
#+begin_src shell
cmod +x ./scripts/init_db.sh
#+end_src


- run ~init_db~ to launch Postgres
#+begin_src shell
./scripts/init_db.sh > /dev/null
#+end_src

- if you want to restart the database

#+begin_src shell
docker kill $(docker ps -q)
./scripts/init_db.sh > /dev/null
#+end_src

- can confirm image is running with command

#+begin_src shell
docker ps
#+end_src

- to make space on vm database

#+begin_src shell
docker kill ps
docker system prune
#+end_src

** App on Docker
- build image
  #+begin_src shell
  docker build --tag zero2prod --file Dockerfile .
  #+end_src

- launch app
  #+begin_src shell
  docker run -p 8000:8000 zero2prod
  #+end_src

** Routes
Testing routes
*** Health Check
#+begin_src shell :results code
curl --verbose http://127.0.0.1:8000/health_check 2>&1
#+END_SRC

** OS Error 24 - "Too many open files"
- increase the limit on maximum number of open file descriptors to 10000
  #+begin_src shell
  ulimit -n 10000
  #+end_src
